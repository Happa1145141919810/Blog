[{"title":"订阅转换服务前端后端的搭建","path":"//订阅转换服务前端后端的搭建/","content":"后端我们使用默认的订阅转换配置即可，因此安装后端服务非常简单。使用以下命令安装后端项目： 1docker run -d --restart=always -p 25500:25500 tindy2013/subconverter:latest 因为该后端程序需要在计算机后台一直运行，因此采用了 -d 选项，并将容器将内部端口 25500 转发到主机端口 25500。25500:25500 前者是主机端口，后者为容器内部端口。安装结束后，我们使用以下命令验证安装是否成功 1curl http://localhost:25500/version 如果出现 subconverter vx.x.x backend 则说明容器已经成功运行。 其它配置如果想要修改后端配置，可以进入容器内修改： 1sudo docker exec -it sub /bin/sh 由于默认文件使用的是 pref.toml ，编辑文件： vi pref.toml 例如需要修改 managed_config_prefix 字段，输入 / 搜索 127.0.0.1 替换成自己的后端地址即可。 前端1git clone https://github.com/CareyWang/sub-web.git 然后进入该项目文件夹，修改 .env 文件的内容 改为你所配置的 后端项目地址 。如果采用 IP 地址的方式，则后端项目地址应为 http://XXX.XXX.XXX.XXX:25500 (即 IP 地址 + 端口号的形式）。 &#x2F;src&#x2F;views&#x2F;Subconverter.vue 修改配置文件 然后在项目主目录下，运行以下命令构建并运行该项目： 12docker build -t subweb-local:latest .docker run -d -p 58080:80 --restart always --name subweb subweb-local:latest 此时前端项目也就构建完成并成功运行了。上述 docker run 命令将容器的 80 端口映射到了主机的 58080 端口。因此可以直接通过 IP+端口号 的形式来访问前端了，端口号为 58080。 注意，对于使用 IP地址+端口号 形式，如果无法访问前端项目，请检查在服务器提供商控制台检查相应的端口是否开启，前端的端口 58080。如果后端也采用 IP地址+端口号 的形式，也需要开启 25500 端口。","tags":["vps","docker","节点","订阅","clash"],"categories":["代理节点那些事"]},{"title":"Types.xcspec-not-found","path":"//Types-xcspec-not-found/","content":"https://github.com/AloneMonkey/MonkeyDev/issues/266 1ln -s /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/Library/Xcode/PrivatePlugIns/IDEOSXSupportCore.ideplugin/Contents/Resources /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/Library/Xcode/Specifications","tags":["教程","Mac","dpkg"],"categories":["杂乱的教程"]},{"title":"Mac安装dpkg","path":"//Mac安装dpkg/","content":"1.安装Xcode 2.安装 Xcode Command Tools 1xcode-select --install 3.同意 Xcode license agreements 1sudo xcodebuild -license agree 4.安装 Macports http://www.macports.org/install.php 4.安装 dpkg 1export PATH=/opt/local/bin:/opt/local/sbin:$PATH 1sudo port -f install dpkg","tags":["教程","Mac","dpkg"],"categories":["杂乱的教程"]},{"title":"使用青龙面板实现阿里云盘自动签到","path":"//使用青龙面板实现阿里云盘自动签到/","content":"1.先在GitHub仓库下载源码 2.打开script.js 填入telegrambot API令牌和群组ID 阿里云盘刷新令牌 保存 3.打开青龙面板并登录 要先下载依赖，依赖管理 - NodeJs - 新建依赖 - 名称输入：node-fetch@2node-fetch@2 只是一个调用http的，如果实在版本差异导致调用失败的，可以换成其他，比如 axios 在脚本管理中上传script.js 在定时任务里新建任务 命令是 task script.js","tags":["vps","docker","青龙面板","阿里云盘","签到"],"categories":["vps那些事"]},{"title":"安装青龙面板","path":"//安装青龙面板/","content":"docker 部署1.docker 安装 1sudo curl -sSL get.docker.com | sh 2.配置国内镜像源 Configure domestic mirror sources 1234567891011121314mkdir -p /etc/dockertee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;&#123; &quot;registry-mirrors&quot;: [ &quot;https://0b27f0a81a00f3560fbdc00ddd2f99e0.mirror.swr.myhuaweicloud.com&quot;, &quot;https://ypzju6vq.mirror.aliyuncs.com&quot;, &quot;https://registry.docker-cn.com&quot;, &quot;http://hub-mirror.c.163.com&quot;, &quot;https://docker.mirrors.ustc.edu.cn&quot; ]&#125;EOFsystemctl daemon-reloadsystemctl restart docker 3.启动容器 1234567docker run -dit \\ -v $PWD/ql/data:/ql/data \\ -p 5700:5700 \\ --name qinglong \\ --hostname qinglong \\ --restart unless-stopped \\ whyour/qinglong:latest docker-compose 部署 docker-compose 安装 1sudo curl -L https://github.com/docker/compose/releases/download/1.16.1/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose 启动容器 1234567891011121. mkdir qinglong wget https://raw.githubusercontent.com/whyour/qinglong/master/docker/docker-compose.yml # 启动 docker-compose up -d # 停止 docker-compose down 访问 打开你的浏览器，访问 http:&#x2F;&#x2F;{ip}:5700 使用 内置命令 12345678910111213141516171819202122232425262728293031# 更新并重启青龙ql update # 运行自定义脚本extra.shql extra # 添加单个脚本文件ql raw &lt;file_url&gt; # 添加单个仓库的指定脚本ql repo &lt;repo_url&gt; &lt;whitelist&gt; &lt;blacklist&gt; &lt;dependence&gt; &lt;branch&gt; &lt;extensions&gt;# 删除旧日志ql rmlog &lt;days&gt; # 启动tg-botql bot # 检测青龙环境并修复ql check # 重置登录错误次数ql resetlet # 禁用两步登录ql resettfa # 依次执行，如果设置了随机延迟，将随机延迟一定秒数task &lt;file_path&gt; # 依次执行，无论是否设置了随机延迟，均立即运行，前台会输出日，同时记录在日志文件中task &lt;file_path&gt; now # 并发执行，无论是否设置了随机延迟，均立即运行，前台不产生日，直接记录在日志文件中，且可指定账号执行task &lt;file_path&gt; conc &lt;env_name&gt; &lt;account_number&gt;(可选的) # 指定账号执行，无论是否设置了随机延迟，均立即运行 task &lt;file_path&gt; desi &lt;env_name&gt; &lt;account_number&gt; # 设置任务超时时间 task -m &lt;max_time&gt; &lt;file_path&gt;# 实时打印任务日志，创建定时任务时，不用携带此参数task -l &lt;file_path&gt; 参数说明 file_url: 脚本地址 repo_url: 仓库地址 whitelist: 拉取仓库时的白名单，即就是需要拉取的脚本的路径包含的字符串，多个竖线分割 blacklist: 拉取仓库时的黑名单，即就是需要拉取的脚本的路径不包含的字符串，多个竖线分割 dependence: 拉取仓库需要的依赖文件，会直接从仓库拷贝到scripts下的仓库目录，不受黑名单影响，多个竖线分割 extensions: 拉取仓库的文件后缀，多个竖线分割 branch: 拉取仓库的分支 days: 需要保留的日志的天数 file_path: 任务执行时的文件路径 env_name: 任务执行时需要并发或者指定时的环境变量名称 account_number: 任务执行时指定某个环境变量需要执行的账号序号 max_time: 超时时间，后缀”s”代表秒(默认值), “m”代表分, “h”代表小时, “d”代表天","tags":["vps","docker","青龙面板"],"categories":["vps那些事"]},{"title":"安装docker容器","path":"//安装docker容器/","content":"Ubuntu使用脚本自动安装在测试或开发环境中 Docker 官方为了简化安装流程，提供了一套便捷的安装脚本，Ubuntu 系统上可以使用这套脚本安装，另外可以通过 --mirror 选项使用国内源进行安装： 若你想安装测试版的 Docker, 请从 test.docker.com 获取脚本 # $ curl -fsSL test.docker.com -o get-docker.sh $ curl -fsSL get.docker.com -o get-docker.sh $ sudo sh get-docker.sh –mirror Aliyun # $ sudo sh get-docker.sh –mirror AzureChinaCloud 执行这个命令后，脚本就会自动的将一切准备工作做好，并且把 Docker 的稳定(stable)版本安装在系统中。 Debian使用脚本自动安装在测试或开发环境中 Docker 官方为了简化安装流程，提供了一套便捷的安装脚本，Debian 系统上可以使用这套脚本安装，另外可以通过 --mirror 选项使用国内源进行安装： 若你想安装测试版的 Docker, 请从 test.docker.com 获取脚本 # $ curl -fsSL test.docker.com -o get-docker.sh $ curl -fsSL get.docker.com -o get-docker.sh $ sudo sh get-docker.sh –mirror Aliyun # $ sudo sh get-docker.sh –mirror AzureChinaCloud 执行这个命令后，脚本就会自动的将一切准备工作做好，并且把 Docker 的稳定(stable)版本安装在系统中。 启动 Docker$ sudo systemctl enable docker $ sudo systemctl start docker 建立 docker 用户组默认情况下，docker 命令会使用 Unix socket 与 Docker 引擎通讯。而只有 root 用户和 docker 组的用户才可以访问 Docker 引擎的 Unix socket。出于安全考虑，一般 Linux 系统上不会直接使用 root 用户。因此，更好地做法是将需要使用 docker 的用户加入 docker 用户组。 建立 docker 组： $ sudo groupadd docker 将当前用户加入 docker 组： $ sudo usermod -aG docker $USER 退出当前终端并重新登录，进行如下测试。 测试 Docker 是否安装正确$ docker run –rm hello-world Unable to find image ‘hello-world:latest’ locally latest: Pulling from library&#x2F;hello-world b8dfde127a29: Pull complete Digest: sha256:308866a43596e83578c7dfa15e27a73011bdd402185a84c5cd7f32a88b501a24 Status: Downloaded newer image for hello-world:latest Hello from Docker! This message shows that your installation appears to be working correctly. To generate this message, Docker took the following steps: \\1. The Docker client contacted the Docker daemon. \\2. The Docker daemon pulled the “hello-world” image from the Docker Hub. ​ (amd64) \\3. The Docker daemon created a new container from that image which runs the ​ executable that produces the output you are currently reading. \\4. The Docker daemon streamed that output to the Docker client, which sent it ​ to your terminal. To try something more ambitious, you can run an Ubuntu container with: $ docker run -it ubuntu bash Share images, automate workflows, and more with a free Docker ID: https://hub.docker.com/ For more examples and ideas, visit: https://docs.docker.com/get-started/ 若能正常输出以上信息，则说明安装成功。","tags":["vps","docker"],"categories":["vps那些事"]},{"title":"如何将节点添加到Clash","path":"//如何将节点添加到Clash/","content":"打开https://sc.happaa.com/ 把节点粘贴到订阅链接中 选择后端地址 选择远程配置 生成订阅链接 导入clash","tags":["教程","Clash"],"categories":["杂乱的教程"]},{"title":"将Mac设置为旁路网关实现硬件连接国际互联网","path":"//将Mac设置为旁路网关实现硬件连接国际互联网/","content":"使用clash&#x2F;surge作为代理工具并开启 设置为系统代理 和 增强模式 在 系统偏好设置 网络 中点击 高级 在 TCP&#x2F;IP 中将 配置IPv4 改为 手动 IPv4地址填写一个在本地网络网段中的IP地址 路由器填写路由器IP地址 应用","tags":["教程","Mac","软路由"],"categories":["杂乱的教程"]},{"title":"创建iOS发布证书并配置文字和CallKit免后台推送权限","path":"//创建iOS发布证书并配置文字和CallKit免后台推送权限/","content":"先登陆开发者页面 创建一本Distribution证书 Apple Distribution和iOS Distribution (App Store and Ad Hoc)都可以 上传你本机的Certificate Signing Request 下载证书 导出为p12备用 在标识符处新建一个带推送的Identifiers 这里随便填 笔者就创建一个com.happaa.demo 记得划到下面勾选 Push Notifications continue register 再回到Certificates 还是点新建的按钮 勾选VoIP Services Certificate continue 选择刚刚创建的Identifiers continue 再次上传Certificate Signing Request continue 这里不需要download 来到Profiles 新建 选择Distribution Ad Hoc 选择刚刚配置了权限的Identifiers 选择distribution证书 勾选设备 命名 下载配置文件 最后就是配合p12签名啦","tags":["iOS","开发者"],"categories":["杂乱的教程"]},{"title":"macOS安装pip3","path":"//macOS安装pip3/","content":"1brew install python3 1curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py 1python3 get-pip.py"},{"title":"Termius.app已损坏，无法打开您应该将它移到废纸篓","path":"//Termius-app已损坏，无法打开您应该将它移到废纸篓/","content":"1sudo xattr -d com.apple.quarantine /Applications/*.app"},{"title":"旧版Xcode支持iOS16","path":"//旧版Xcode支持iOS16/","content":"https://github.com/RayJiang16/iOSDeviceSupport 1curl -L -O https://github.com/RayJiang16/iOSDeviceSupport/raw/main/download.sh 1sudo sh download.sh 16.0"},{"title":"安装EasyDev","path":"//安装EasyDev/","content":"1sudo git clone --recursive https://github.com/lemon4ex/EasyDev.git /opt/EasyDev 123cd /opt/EasyDev/binchmod +x ed-install./ed-install"},{"title":"安装MonkeyDev","path":"//安装MonkeyDev/","content":"1、选择指定的Xcode进行安装 1sudo xcode-select -s /Applications/Xcode-beta.app 2、默认安装的Xcode 1xcode-select -p 3、执行安装命令 1sudo /bin/sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/AloneMonkey/MonkeyDev/master/bin/md-install)&quot; 4、卸载命令 1sudo /bin/sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/AloneMonkey/MonkeyDev/master/bin/md-uninstall)&quot; 5、更新命令 1sudo /bin/sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/AloneMonkey/MonkeyDev/master/bin/md-update)&quot;"},{"title":"安装ldid","path":"//安装ldid/","content":"1brew install ldid"},{"title":"theos的配置","path":"//theos的配置/","content":"theos的配置1export THEOS=/opt/theos 下载theos到指定的目录 1git clone --recursive https://github.com/theos/theos.git $THEOS"},{"title":"Hello World","path":"//hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment"}]